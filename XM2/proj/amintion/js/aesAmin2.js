import * as mo from "movy";

//定义密文
const cryp=[180, 231, 92, 142, 55, 240, 31, 176, 36, 77, 113, 108, 153, 239, 122, 33];

//定义密钥
let key=[0x3C,0xA1,0x0B,0x21,
         0x57,0xF0,0x19,0x16,
         0x90,0x2E,0x13,0x80,
         0xAC,0xC1,0x07,0xBD];

//定义逆s盒
const SiBox = [0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e, 0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84, 0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73, 0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4, 0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61, 0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d];
//定义s盒
var sBox    = [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15, 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf, 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73, 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08, 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf, 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16];
 
/**
 * 
 * 总过程展示
 * 
 */

//添加标题
const title=mo.addText("AES解密总过程",{
              position:[0,5],
            }).reveal();

const img1=mo.addImage("allDecrypFlow.png",{position:[25,0],scale:8});

img1.moveTo({position:[0,0],duration:3});
//矩阵形状
const gridSize = [5, 5];

const group = mo.addGroup({
  scale: 1.5,
  position:[20,0],
});
group.moveTo({position:[0,0],t:'+=3'});
img1.moveTo({position:[-30,0],t:'<'});
let num=1;

//生成密文矩阵
num = 1;
for (let i = 1; i < gridSize[1]; i++) {
  for (let j = 1; j < gridSize[0]; j++) {
    const pos = [-gridSize[0] * 0.5 + j, gridSize[1] * 0.5 - i];

    group.addText("0x"+GetHex(cryp[num-1]), {
      position: pos.concat([0.02]),
      scale: 0.3,
      font: "math",
      color:"white",
    });

    group.addRectOutline({ position:[pos[0],pos[1],1] , lineWidth: 0.05});
    num++;
    }
}

group.moveTo({position:[0,0],duration:2,t:'<'});


//解密
let plaint=AESInv(cryp,key);
//添加解密后的矩阵

group.moveTo({position:[0,0,1],duration:3});

num = 1;
for (let i = 1; i < gridSize[1]; i++) {
  for (let j = 1; j < gridSize[0]; j++) {
    const pos = [-gridSize[0] * 0.5 + j, gridSize[1] * 0.5 - i];
    group.addText("0x"+GetHex(plaint[num-1]), {
      position: [pos[0],pos[1],0.5],
      scale: 0.3,
      font: "math",
      color:  "black",
    }).reveal({t:'<0.3'});


    group.addRect({
          position: [pos[0], pos[1], 0.4],
          color: "#EDCF23",
        })
        .grow2({
          t: "<0.3",
        });
    num++;
  }
}


/**要用到的函数
  * 
  * 
  * 
  */
 
//得到自动补齐2位的16进制数
function GetHex(num) {
  let out=num.toString(16);
  if(out.length<=1){
    return('0'+out);
  }
  return out;
}

//行移位
function LinMove(pIn){
  let out=new Array();
  let index=[0 , 1, 2,  3,
             5 , 6, 7,  4,
             10,11, 8, 9,
             15,12,13, 14];

  for(let i=0;i<16;i++){
    out.push(pIn[index[i]]);
  }
  return out;
}


//console.log(CowMux(test));

//列混合
function CowMux(pIn){
  let out=new Array();
  for(let i=0;i<4;i++){
    for(let j=0;j<4;j++){
      let temp;
      if(i==0){
        temp=AESXOR(pIn[2*4+j],pIn[3*4+j]);
        temp=AESXOR(temp,GFMut2(pIn[0*4+j]));
        temp=AESXOR(temp,GFMut3(pIn[1*4+j]));
      }
      if(i==1){
        temp=AESXOR(pIn[0*4+j],pIn[3*4+j]);
        temp=AESXOR(temp,GFMut2(pIn[1*4+j]));
        temp=AESXOR(temp,GFMut3(pIn[2*4+j]));
      }
      if(i==2){
        temp=AESXOR(pIn[0*4+j],pIn[1*4+j]);
        temp=AESXOR(temp,GFMut2(pIn[2*4+j]));
        temp=AESXOR(temp,GFMut3(pIn[3*4+j]));
      }
      if(i==3){
        temp=AESXOR(pIn[1*4+j],pIn[2*4+j]);
        temp=AESXOR(temp,GFMut2(pIn[3*4+j]));
        temp=AESXOR(temp,GFMut3(pIn[0*4+j]));
      }
      out.push(temp);
    }
  }
  return out;
}

//s盒替换
function SBoxTrans(pIn){
  let out=new Array();
  for(let i=0;i<16;i++){
    let obj=GetHex(pIn[i]);
    let lin=parseInt(obj[0],16);
    let cow=parseInt(obj[1],16);
    out.push(sBox[lin*16+cow]);
  }
  return out;
}

function GFMut2(s){
  let out=s;
  out=out<<1;
  let a7=out&0x00000100;
  if(a7!=0){
    out=out&0x000000ff;
    out=out^0x1b;
  }
  return out;
}

function GFMut3(s){
  let out=GFMut2(s);
  out=out^s;
  return out;
}

function GFMut4(s){
  return GFMut2(GFMut2(s));
}

function GFMut8(s){
  return GFMut2(GFMut4(s));
}

function GFMut9(s){
  return GFMut8(s)^s;
}

function GFMut11(s){
  return GFMut9(s)^GFMut2(s);
}

function GFMut12(s){
  return GFMut8(s)^GFMut4(s);
}

function GFMut13(s){
  return GFMut12(s)^s;
}

function GFMut14(s){
  return GFMut12(s)^GFMut2(s);
}

//将16进制数进行亦或
function AESXOR(num1,num2){
  let n1=num1;
  let n2=num2;
  n1=n1^n2;
  return n1;
}

//s盒替换
function InvSBoxTrans(pIn){
  let out=new Array();
  for(let i=0;i<16;i++){
    let obj=GetHex(pIn[i]);
    let lin=parseInt(obj[0],16);
    let cow=parseInt(obj[1],16);
    out.push(SiBox[lin*16+cow]);
  }
  return out;
}

//给一个字用的S盒替换
function SBoxTransW(pIn){
  let out;
  for(let i=0;i<4;i++){
    let obj=GetHex(pIn);
    let lin=parseInt(obj[i*2],16);
    let cow=parseInt(obj[i*2+1],16);
    //out.push(sBox[lin*16+cow]);
    out=out<<8|(sBox[lin*16+cow]);
  }
  out=out>>>0;
  return out;
}

//行移位
function InvLinMove(pIn){
  let out=new Array();
  let index=[0 , 1, 2,  3,
              7 ,4, 5 , 6, 
             10,11, 8, 9,
             13,14,15,12,];

  for(let i=0;i<16;i++){
    out.push(pIn[index[i]]);
  }
  return out;
}

//列混合
function InvCowMux(pIn){
  let out=new Array();
  for(let i=0;i<4;i++){
    for(let j=0;j<4;j++){
      let temp;
      if(i==0){
        temp=AESXOR(GFMut14(pIn[0*4+j]),GFMut11(pIn[1*4+j]));
        temp=AESXOR(temp,GFMut13(pIn[2*4+j]));
        temp=AESXOR(temp,GFMut9(pIn[3*4+j]));
      }
      if(i==1){
        temp=AESXOR(GFMut9(pIn[0*4+j]),GFMut14(pIn[1*4+j]));
        temp=AESXOR(temp,GFMut11(pIn[2*4+j]));
        temp=AESXOR(temp,GFMut13(pIn[3*4+j]));
      }
      if(i==2){
        temp=AESXOR(GFMut13(pIn[0*4+j]),GFMut9(pIn[1*4+j]));
        temp=AESXOR(temp,GFMut14(pIn[2*4+j]));
        temp=AESXOR(temp,GFMut11(pIn[3*4+j]));
      }
      if(i==3){
        temp=AESXOR(GFMut11(pIn[0*4+j]),GFMut13(pIn[1*4+j]));
        temp=AESXOR(temp,GFMut9(pIn[2*4+j]));
        temp=AESXOR(temp,GFMut14(pIn[3*4+j]));
      }
      out.push(temp);
    }
  }
  return out;
}

//将16个字节转化为4个字 
function ByteToW(kIn){
  let num1=0;
  let out=new Array();
  for(let i=0;i<4;i++){
    let temp=0;
    for(let j=0;j<4;j++){
      temp=temp<<8|kIn[num1];
      num1++;
    }
    temp=temp>>>0;//转换为无符号数
    out.push(temp);
    temp=0;
  }
  return out;
}


//T函数
function T(wIn,RoundOfKeyGen){
  let temp=wIn>>>0;
  //console.log((temp<<8>>>0).toString(16));
  let out=(temp<<8>>>0)|((0xff>>>0)&(wIn>>24>>>0));
  out=out>>>0;
  //console.log(out.toString(16));
  out=SBoxTransW(out);
  //console.log(out.toString(16));
  let Rcon=[0x01000000,0x02000000,0x4000000,0x10000000,0x20000000,0x40000000,0x80000000,0x1B000000,0x36000000];
  out=out^(Rcon[RoundOfKeyGen]);
  out=out>>>0;
  //console.log(out.toString(16));
  return out;
}

//扩展密钥
function ExtenKey(kIn){
  let w=ByteToW(kIn);
  let num1=4;
  let temp;
  let RoundOfKeyGen=0;
  for(let i=0;i<10;i++){
    temp=w[num1-4]^T(w[num1-1],RoundOfKeyGen);
    w.push(temp>>>0);//先处理4的倍数的
    //console.log(w[3].toString(16));
    num1++;
    for(let j=1;j<4;j++){
      temp=w[num1-4]^w[num1-1];
      w.push(temp>>>0);//再计算不是4的倍数的
      num1++;
    }
    RoundOfKeyGen++;
  }
  return w;
}


//轮密钥加
function InvAddRoundKey(pIn,kWIn,round){
  let num1=0;
  let out=new Array();
  for(let i=0;i<4;i++){
    //let te=InvCowMux(kWIn[round*4+i]);
    let te=kWIn[round*4+i];
    let temp=te.toString();
    for(let j=0;j<4;j++){
      let tempInt=parseInt(temp[j*2]+temp[j*2+1],16);
      temp=AESXOR(pIn[num1],tempInt);
      out.push(temp);
      num1++;
    }
  }
  return out;
}

//轮密钥加
function AddRoundKey(pIn,kWIn,round){
  let num1=0;
  let out=new Array();

  for(let i=0;i<4;i++){
    let temp=kWIn[round*4+i].toString();
    for(let j=0;j<4;j++){
      let tempInt=parseInt(temp[j*2]+temp[j*2+1],16);
      temp=AESXOR(pIn[num1],tempInt);
      out.push(temp);
      num1++;
    }
  }
  return out;
}

//AES加密
function AESInv(pIn,keyIn){
  let keyW=ExtenKey(keyIn);
  let temp=AddRoundKey(pIn,keyW,10);
  for(let i=1;i<=9;i++){
    temp=InvLinMove(temp);
    temp=InvSBoxTrans(temp);
    temp=InvAddRoundKey(temp,keyW,10-i);
    temp=InvCowMux(temp);
  }
  temp=InvLinMove(temp);
  temp=InvSBoxTrans(temp);
  temp=AddRoundKey(temp,keyW,0);
  return temp;
}

let test1=[0x0,0x1,0x2,0x3,0x4,0x5,0x6,0x7,0x8,0x9,0xa,0xb,0xc,0xd,0xe,0xf];
//console.log(InvCowMux(CowMux(test1)));
//let keyW=ExtenKey(key);
//console.log(InvAddRoundKey(AddRoundKey(test1,keyW,0),keyW,0));
console.log(AESInv(cryp,key));